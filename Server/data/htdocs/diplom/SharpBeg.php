
<?php include "timerajax.php";?>
<div class="container">
    <h2>Краткий обзор языка C#</h2>
    C# (произносится как "си шарп") — современный объектно-ориентированный и типобезопасный язык программирования. C# позволяет
    разработчикам создавать разные типы безопасных и надежных приложений, выполняющихся в .NET. C# относится к широко известному семейству
    языков C, и покажется хорошо знакомым любому, кто работал с C, C++, Java или JavaScript. Здесь представлен обзор основных компонентов языка C# 8 и более ранних версий.
    Если вы хотите изучить язык с помощью интерактивных примеров,<a class="shinestuff" href="https://docs.microsoft.com/ru-ru/dotnet/csharp/tour-of-csharp/tutorials/"> рекомендуем поработать с вводными руководствами по C#.</a>
    <p>C# — объектно-ориентированный, ориентированный на компоненты язык программирования. C# предоставляет языковые конструкции для непосредственной поддержки такой концепции работы. Благодаря этому C# подходит для создания и применения программных компонентов. С момента создания язык C# обогатился функциями для поддержки новых рабочих нагрузок и современными рекомендациями по разработке ПО. В основном C# — объектно-ориентированный язык. Вы определяете типы и их поведение.

        Вот лишь несколько функций языка C#, которые позволяют создавать надежные и устойчивые приложения. Сборка мусора автоматически освобождает память, занятую недостижимыми неиспользуемыми объектами. Типы, допускающие значение null, обеспечивают защиту от переменных, которые не ссылаются на выделенные объекты. Обработка исключений предоставляет структурированный и расширяемый подход к обнаружению ошибок и восстановлению после них. Лямбда-выражения
        поддерживают приемы функционального программирования. Синтаксис LINQ создает общий шаблон для работы с данными из любого источника. Поддержка языков для асинхронных операций предоставляет синтаксис для создания распределенных систем. В C# имеется Единая система типов. Все типы C#, включая типы-примитивы, такие как <code>int</code> и <code>double</code>, наследуют от одного корневого типа <code>object</code>. Все типы используют общий набор операций, а значения любого типа можно хранить, передавать и обрабатывать схожим образом. Более того, C# поддерживает как определяемые пользователями ссылочные типы, так и типы значений. C# позволяет динамически выделять объекты и хранить упрощенные структуры в стеке. C# поддерживает универсальные методы и типы, обеспечивающие повышенную безопасность типов и производительность. C# предоставляет итераторы, которые позволяют разработчикам классов коллекций определять пользовательские варианты поведения для клиентского кода.
        C# подчеркивает Управление версиями , чтобы обеспечить совместимость программ и библиотек с течением времени. Вопросы управления версиями существенно повлияли на такие аспекты разработки C#, как раздельные модификаторы virtual и override, правила разрешения перегрузки методов и поддержка явного объявления членов интерфейса.</p>
   <h3>Архитектура .NET
   </h3>
    <P>Программы C# выполняются в .NET, виртуальной системе выполнения, вызывающей общеязыковую среду выполнения (CLR) и набор библиотек классов. Среда CLR — это реализация общеязыковой инфраструктуры языка (CLI), являющейся международным стандартом, от корпорации Майкрософт. CLI является основой для создания сред выполнения и разработки, в которых языки и библиотеки прозрачно работают друг с другом.
        Исходный код, написанный на языке C# компилируется в промежуточный язык (IL), который соответствует спецификациям CLI. Код на языке IL и ресурсы, в том числе растровые изображения и строки, сохраняются в сборке, обычно с расширением .dll. Сборка содержит манифест с информацией о типах, версии, языке и региональных параметрах для этой сборки.
        При выполнении программы C# сборка загружается в среду CLR. Среда CLR выполняет JIT-компиляцию из кода на языке IL в инструкции машинного языка. Среда CLR также выполняет другие операции, например, автоматическую сборку мусора, обработку исключений и управление ресурсами. Код, выполняемый средой CLR, иногда называют "управляемым кодом". "Неуправляемый код" компилируется на машинный язык, предназначенный для конкретной платформы.
        Обеспечение взаимодействия между языками является ключевой особенностью .NET. Код IL, созданный компилятором C#, соответствует спецификации общих типов (CTS). Код IL, созданный из кода на C#, может взаимодействовать с кодом, созданным из версий .NET для языков F#, Visual Basic, C++. Существует более 20 других языков, совместимых с CTS. Одна сборка может содержать несколько модулей, написанных на разных языках .NET, и все типы могут ссылаться друг на друга, как если бы они были написаны на одном языке.
        В дополнение к службам времени выполнения .NET также включает расширенные библиотеки. Эти библиотеки поддерживают множество различных рабочих нагрузок. Они упорядочены по пространствам имен, которые предоставляют разные полезные возможности: от операций файлового ввода и вывода до управления строками и синтаксического анализа XML, от платформ веб-приложений до элементов управления Windows Forms. Обычно приложение C# активно используют библиотеку классов .NET для решения типовых задач.</P>
    <h3>Здравствуй, мир</h3>
    <p>Для первого знакомства с языком программирования традиционно используется программа "Hello, World". Вот ее пример на C#:</p>
    <div class="trblockquote">
        using System;<div></div>
        class Hello<div></div>
        {<div></div>
        static void Main()<div></div>
        {<div></div>
        Console.WriteLine("Hello, World");<div></div>
        }<div></div>
        }<div></div>
    </div>
    <P>Программа "Hello, World" начинается с директивы using, которая ссылается на пространство имен System. Пространства имен позволяют иерархически упорядочивать программы и библиотеки C#. Пространства имен содержат типы и другие пространства имен. Например, пространство имен System содержит несколько типов (в том числе используемый в нашей программе класс Console) и несколько других пространств имен, таких как IO и Collections. Директива using, которая ссылается на пространство имен, позволяет использовать типы из этого пространства имен без указания полного имени. Благодаря директиве using в коде программы можно использовать сокращенное имя Console.WriteLine вместо полного варианта System.Console.WriteLine.
        Класс Hello, объявленный в программе "Hello, World", имеет только один член — это метод с именем Main. Метод Main объявлен с модификатором static. Методы экземпляра могут ссылаться на конкретный экземпляр объекта, используя ключевое слово this, а статические методы работают без ссылки на конкретный объект. По стандартному соглашению точкой входа программы C# является статический метод с именем Main.
        Выходные данные программы создаются в методе WriteLine класса Console из пространства имен System. Этот класс предоставляется библиотеками стандартных классов, ссылки на которые компилятор по умолчанию добавляет автоматически.</P>
    <h3>Типы и переменные
    </h3>
    <p>Тип определяет структуру и поведение любых данных в C#. Объявление типа может включать его члены, базовый тип, интерфейсы, которые он реализует, и операции, разрешенные для этого типа. Переменная — это метка, которая ссылается на экземпляр определенного типа.

        В C# существуют две разновидности типов: ссылочные типы и типы значений. Переменные типа значений содержат непосредственно данные, а в переменных ссылочных типов хранятся ссылки на нужные данные, которые именуются объектами. Две переменные ссылочного типа могут ссылаться на один и тот же объект, поэтому может случиться так, что операции над одной переменной затронут объект, на который ссылается другая переменная. Каждая переменная типа значения имеет собственную копию данных, и операции над одной переменной не могут затрагивать другую (за исключением переменных параметров ref и out).

        Идентификатор — это имя переменной. Идентификатор — это последовательность символов Юникода без пробелов. Идентификатор может быть зарезервированным словом C#, если он имеет префикс @. При взаимодействии с другими языками в качестве идентификатора может быть полезно использовать зарезервированное слово.

        Типы значений в C# делятся на простые типы, типы перечислений, типы структур, типы, допускающие значение NULL, и типы значений кортежей. Ссылочные типы в C# подразделяются на типы классов, типы интерфейсов, типы массивов и типы делегатов.</p>
    <p>Далее представлены общие сведения о системе типов в C#.</p>
    <ul>
        <li>Типы значений</li>
        <ul>
           <li> Простые типы</li>
            <ul>
                <li>Целое со знаком: , <code>short</code> ,<code> int </code>,<code> long</code></li>
                <li>Целое без знака: , <code>ushort</code>,<code> uint </code>,<code>ulong</li></code>
                <li>Символы Юникода: , представляющие блок кода UTF-16</li>
                <li>Двоичная с плавающей запятой IEEE: ,<code>double</code></li>
                <li>Десятичная точность с плавающей запятой с высокой точностью:</li>
                <li>Логический: <code>bool</code>, используется для представления логических значений, которые могут иметь значение true или false.</li>
            </ul>
            <li>Типы перечисления</li>
            <ul>
                <li>Пользовательские типы в формате <code>enum E {...}.</code> Тип <code>enum</code> является отдельным типом со списком именованных констант. Каждый тип enum имеет базовый тип, в роли которого выступает один из восьми целочисленных типов. Набор значений типа enum аналогичен набору значений его базового типа.</li>
            </ul>
            <li>Типы структур</li>
            <ul>
                <li>Пользовательские типы в формате <code>struct S {...}</code></li>
            </ul>
            <li>Типы значений, допускающие значение NULL</li>
            <ul>
                <li>Расширения других типов значений, допускающие значение null</li>
            </ul>
            <li>Типы значений кортежей</li>
            <ul>
                <li>Пользовательские типы в формате (T1, T2, ...)</li>
            </ul>
        </ul>
        <li>Ссылочные типы</li>
        <ul>
            <li>Типы классов</li>
                <ul>
                    <li>
                        Исходный базовым классом для всех типов: <code>object</code>
                    </li>
                    <li>Строки в Юникоде: , представляющие последовательность единиц кода UTF-16
                        Пользовательские типы в формате <code>class C {...}</code></li>
                </ul>
            <li>Типы интерфейсов</li>
            <ul>
                <li>Пользовательские типы в формате <code>interface I {...}</code></li>
            </ul>
            <li>Типы массивов</li>
            <ul>
                <Li>
                    Одномерные, многомерные массивы и массивы массивов. Например, <code>int[]</code>, <code>int[,]</code> и <code>int[][]</code>.
                </Li>
            </ul>
            <li>
                Типы делегатов
            </li>
            <ul>
                <li>Пользовательские типы в формате <code>delegate int D(...)</code></li>
            </ul>
        </ul>
    </ul>
    <p>
        Программы C# используют объявления типов для создания новых типов. В объявлении типа указываются имя и члены нового типа. Шесть категорий типов в C# определяются пользователем: типы классов, типы структур, типы интерфейсов, типы перечисления, типы делегатов и типы значений кортежей. Можно также объявлять типы record, либо record struct, либо record class. Типы записей имеют члены, синтезированные
        компилятором. Записи используются в основном для хранения значений с минимальным связанным поведением.
    </p>
    <p>
        <ul>
        <li>
            Тип class определяет структуру данных, которая содержит данные-члены (поля) и функции-члены (методы, свойства и т. д.). Классы поддерживают механизмы одиночного
            наследования и полиморфизма, которые позволяют создавать производные классы, расширяющие и уточняющие определения базовых классов.
        </li>
        <li>
            Тип struct похож на тип класса тем, что он представляет структуру с данными-членами и функциями-членами. Но, в отличие от классов, структуры являются типами значений и обычно не требуют выделения памяти из кучи. Типы структуры не поддерживают
            определяемое пользователем наследование, и все типы структуры неявно наследуют от типа <code>object</code>.
        </li>
        <li>Тип interface определяет контракт в виде именованного набора открытых элементов. Объект типа <code>class</code> или <code>struct</code>, реализующий <code>interface</code>, должен предоставить реализации для всех элементов интерфейса. Тип interface может наследовать от нескольких базовых интерфейсов, а class или struct могут реализовывать несколько интерфейсов.</li>
        <li>Тип delegate (делегат) представляющий ссылки на методы с конкретным списком параметров и типом возвращаемого значения. Делегаты позволяют использовать методы как сущности, сохраняя их в переменные и передавая в качестве параметров. Делегаты аналогичны типам функций, которые используются в функциональных языках. Их принцип работы близок к указателям функций
            из некоторых языков. В отличие от указателей функций, делегаты являются объектно-ориентированными и типобезопасными.</li>
    </ul>
    </p>
    <p>Типы <code>class</code>, <code>struct</code>, <code>interface</code> и <code>delegate</code> поддерживают универсальные шаблоны, которые позволяют передавать им другие типы в качестве параметров.

        C# поддерживает одномерные и многомерные массивы любого типа. В отличие от перечисленных выше типов, типы массивов не требуется объявлять перед использованием. Типы массивов можно сформировать, просто введя квадратные скобки после имени типа. Например, int[] является одномерным массивом значений типа int, а int[,] — двумерным массивом значений типа int, тогда как int[][] представляет собой одномерный массив одномерных массивов (или массив массивов) значений типа int.

        Типы, допускающие значение NULL, не требуют отдельного определения. Для каждого обычного типа T, который не допускает значение NULL, существует идентичный тип T?, который отличается только тем, что может содержать дополнительное значение null. Например, int? является типом, который может содержать любое 32-разрядное целое число или значение null, а string? — любое значение string или null.

        Система типов в C# унифицирована таким образом, что значение любого типа можно рассматривать как object (объект). Каждый тип в C# является прямо или косвенно производным от типа класса object, и этот тип object является исходным базовым классом для всех типов. Чтобы значения ссылочного типа обрабатывались как объекты, им просто присваивается тип object. Чтобы значения типов значений обрабатывались как объекты, выполняются операции упаковки-преобразования и распаковки-преобразования. В следующем примере значение int преобразуется в object, а затем обратно в int.</p>
    <div class="trblockquote">
        int i = 123;<div></div>
        object o = i;    // Boxing<div></div>
        int j = (int)o;  // Unboxing<div></div>

    </div>
    <p>Если значение типа назначается ссылке <code>object</code>, для хранения значения выделяется упаковка. Эта упаковка является экземпляром ссылочного типа, и в нее копируется значение. И наоборот, если ссылка типа object используется для типа значения, для соответствующего object выполняется проверка, является ли он упаковкой правильного типа. Если эта проверка завершается успешно, копируется значение этой упаковки.

        Унифицированная система типов C# фактически означает, что типы значений обрабатываются как <code>object</code> ссылки "по запросу". Из-за унификации библиотеки общего назначения, использующие тип object , могут использоваться со всеми типами, производными от object , включая ссылочные типы и типы значений.

        В C# существует несколько типов переменных, в том числе поля, элементы массива, локальные переменные и параметры. Переменные представляют собой места хранения, и каждая переменная имеет тип, который определяет допустимые значения для хранения в этой переменной. Примеры представлены ниже.</p>
    <P>
        <ul>
        <li>
            Тип значения, не допускающий значения <code>Null</code>
            <ul>
                <li>Значение такого типа
                </li>
            </ul>
        </li>
        <li>
            Тип значения, допускающий значение <code>Null</code>
            <ul>
                <li>Значение <code>null</code> или значение такого типа

                </li>
            </ul>
        </li>
        <li>
            object
            <ul>
                <li>Ссылка null, ссылка на объект любого ссылочного типа или ссылка на упакованное значение любого типа значения

                </li>
            </ul>
        </li>
        <li>
            Тип класса
            <ul>
                <li>Ссылка null, ссылка на экземпляр такого типа класса или ссылка на экземпляр любого класса, производного от такого типа класса
                </li>
            </ul>
        </li>
        <li>
            Тип интерфейса
            <ul>
                <li>Ссылка null, ссылка на экземпляр типа класса, который реализует такой тип интерфейса, или ссылка на упакованное значение типа значения, которое реализует такой тип интерфейса

                </li>
            </ul>
        </li>
        <li>
            Тип массива
            <ul>
                <li>Ссылка null, ссылка на экземпляр такого типа массива или ссылка на экземпляр любого совместимого типа массива
                </li>
            </ul>
        </li>
        <li>
            Тип делегата
            <ul>
                <li>Ссылка null или ссылка на экземпляр совместимого типа делегата

                </li>
            </ul>
        </li>
    </ul>
    </P>
    <h3>Структура программы</h3>
    <p>Основными понятиями Организации в C# являются программы, пространства имен, типы, членыи сборки. В программе объявляются типы, которые содержат члены. Эти типы можно организовать в пространства имен. Примерами типов являются классы, структуры и интерфейсы. К членам относятся поля, методы, свойства и события. При компиляции программы на C# упаковываются в сборки. Сборки обычно имеют расширение .exe файла или .dll , в зависимости от того, реализуют ли они .exe или библиотекисоответственно.

        В качестве небольшого примера рассмотрим сборку, содержащую следующий код:</p>
    <div class="trblockquote">
        namespace Acme.Collections;<div></div>
        <div></div>
        public class Stack<T><div></div>
            {<div></div>
            Entry _top;<div></div>
            <div></div>
            public void Push(T data)<div></div>
            {<div></div>
            _top = new Entry(_top, data);<div></div>
            }<div></div>
            <div></div>
            public T Pop()<div></div>
            {<div></div>
            if (_top == null)<div></div>
            {<div></div>
            throw new InvalidOperationException();<div></div>
            }<div></div>
            T result = _top.Data;<div></div>
            _top = _top.Next;<div></div>
            <div></div>
            return result;<div></div>
            }<div></div>
            <div></div>
            class Entry<div></div>
            {<div></div>
            public Entry Next { get; set; }<div></div>
            public T Data { get; set; }<div></div>
            <div></div>
            public Entry(Entry next, T data)<div></div>
            {<div></div>
            Next = next;<div></div>
            Data = data;<div></div>
            }<div></div>
            }<div></div>
            }<div></div>
    </div>
    <p>Полное имя этого класса: Acme.Collections.Stack. Этот класс содержит несколько членов: поле с именем _top, два метода с именами Push и Pop, а также вложенный класс с именем Entry. Класс Entry, в свою очередь, содержит три члена: свойство с именем Next, свойство с именем Data и конструктор. StackЯвляется Stack классом. Он имеет параметр одного типа T, который замещается конкретным типом при использовании.

        Стек — это коллекция типа FILO (прибыл первым — обслужен последним). Новые элементы добавляются в верх стека. Удаляемый элемент исключается из верхней части стека. В предыдущем примере объявляется тип Stack, который определяет хранилище и поведение для стека. Можно объявить переменную, которая ссылается на экземпляр типа Stack для использования этой возможности.

        Сборки содержат исполняемый код в виде инструкций промежуточного языка (IL) и символьную информацию в виде метаданных. Перед выполнением JIT-компилятор среды CLR .NET преобразует код IL в сборке в код, зависящий от процессора.

        Сборка полностью описывает сама себя и содержит весь код и метаданные, поэтому в C# не используются директивы #include и файлы заголовков. Чтобы использовать в программе C# открытые типы и члены, содержащиеся в определенной сборке, вам достаточно указать ссылку на эту сборку при компиляции программы. Например, эта программа использует класс Acme.Collections.Stack из сборки acme.dll:</p>
    <div class="trblockquote">
        class Example<div></div>
        {<div></div>
        public static void Main()<div></div>
        {<div></div>
        var s = new Acme.Collections.Stack<int>();<div></div>
            s.Push(1); // stack contains 1<div></div>
            s.Push(10); // stack contains 1, 10<div></div>
            s.Push(100); // stack contains 1, 10, 100<div></div>
            Console.WriteLine(s.Pop()); // stack contains 1, 10<div></div>
            Console.WriteLine(s.Pop()); // stack contains 1<div></div>
            Console.WriteLine(s.Pop()); // stack is empty<div></div>
            }<div></div>
            }<div></div>
    </div>
    <p>Для компиляции программы вам потребуется создать ссылку на сборку, содержащую класс стека, определенный в примере выше.

        Программы C# можно хранить в нескольких исходных файлах. При компиляции программы C# все исходные файлы обрабатываются вместе, при этом они могут свободно ссылаться друг на друга. По сути, это аналогично тому, как если бы все исходные файлы были объединены в один большой файл перед обработкой. В C# никогда не используются опережающие объявления, так как порядок объявления, за редким исключением, не играет никакой роли. В C# нет требований объявлять только один открытый тип в одном исходном файле, а также имя исходного файла не обязано совпадать с типом, объявляемом в этом файле.

        Такие организационные блоки описываются в других статьях этого обзора.</p>
    <div style="position: relative;text-align: right"><?php include("likestuff.php");?> <a class="shinestuff" href="https://docs.microsoft.com/ru-ru/dotnet/csharp/tour-of-csharp/">Источник</a></div>
</div>
<?php include("footer.php");?>
</body>
</html>